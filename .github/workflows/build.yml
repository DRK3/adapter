#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

name: "adapter ci"

env:
  GO_VERSION: 1.17

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  SemanticPullRequest:
     name: Semantic Pull Request Check
     if: github.event_name == 'pull_request'
     runs-on: ubuntu-latest
     steps:
       - uses: amannn/action-semantic-pull-request@v4
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Checks:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run checks
        run: |
          echo $PATH
          go env
          echo ${{ github.workspace }}
          make checks

  UnitTest:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run unit test
        run: make unit-test
      - name: Upload coverage to Codecov
        run: |
          bash <(curl https://codecov.io/bash)
        env:
          CODECOV_UPLOAD_TOKEN: ${{ secrets.CODECOV_UPLOAD_TOKEN }}

  BDDTestIssuerAdapter:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run Issuer Adapter BDD test
        run: |
          echo '127.0.0.1 testnet.orb.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 rp-adapter-rest.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 issuer-adapter-rest.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 issuer-hydra.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 mock-issuer-login.trustbloc.local' | sudo tee -a /etc/hosts
          echo '//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}' > ~/.npmrc
          echo '@hyperledger:registry=https://npm.pkg.github.com' >> ~/.npmrc
          echo '@trustbloc-cicd:registry=https://npm.pkg.github.com' >> ~/.npmrc
          echo '@trustbloc:registry=https://npm.pkg.github.com' >> ~/.npmrc
          make bdd-test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAGS: issuer_adapter

  BDDTestRPAdapter:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run RP Adapter BDD test
        run: |
          echo '127.0.0.1 testnet.orb.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 rp-adapter-rest.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 issuer-adapter-rest.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 issuer-hydra.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 mock-issuer-login.trustbloc.local' | sudo tee -a /etc/hosts
          echo '//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}' > ~/.npmrc
          echo '@hyperledger:registry=https://npm.pkg.github.com' >> ~/.npmrc
          echo '@trustbloc-cicd:registry=https://npm.pkg.github.com' >> ~/.npmrc
          echo '@trustbloc:registry=https://npm.pkg.github.com' >> ~/.npmrc
          make bdd-test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAGS: rp_adapter

  Publish:
    needs: [Checks, UnitTest, BDDTestIssuerAdapter, BDDTestRPAdapter]
    if: github.event_name == 'push' && (github.repository == 'trustbloc/adapter' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - run: |
          function logout {
            docker logout
          }
          trap logout EXIT
          git lfs install
          git lfs pull
          source ci/version_var.sh
          echo $DOCKER_PASSWORD | docker login ghcr.io --username $DOCKER_USER --password-stdin
          echo '//npm.pkg.github.com/:_authToken=${DOCKER_PASSWORD}' > ~/.npmrc
          echo '@trustbloc-cicd:registry=https://npm.pkg.github.com' >> ~/.npmrc
          echo '@trustbloc:registry=https://npm.pkg.github.com' >> ~/.npmrc

          make issuer-adapter-rest-docker
          docker tag ghcr.io/trustbloc/issuer-adapter:latest ${ISSUER_ADAPTER_REST_PKG}:${ADAPTER_REST_TAG}
          docker push ${ISSUER_ADAPTER_REST_PKG}:${ADAPTER_REST_TAG}

          make rp-adapter-rest-docker
          docker tag ghcr.io/trustbloc/rp-adapter:latest ${RP_ADAPTER_REST_PKG}:${ADAPTER_REST_TAG}
          docker push ${RP_ADAPTER_REST_PKG}:${ADAPTER_REST_TAG}

          cd ./cmd/wallet-adapter-web
          sed -i 's/"version": "0.1.0"/"version": "'${NPM_WALLET_PKG_TAG}'"/g' package.json
          sed -i 's#"name": "@trustbloc/wallet-adapter-web"#"name": "@'${NPM_WALLET_PKG_NAME}'"#g' package.json
          sed -i 's#"url": "git://github.com/trustbloc/edge-adapter.git"#"url": "git://github.com/'${NPM_WALLET_PKG_REPO}'.git"#g' package.json
          npm install
          npm publish
        env:
          DOCKER_USER: ${{ secrets.CR_USER }}
          DOCKER_PASSWORD: ${{ secrets.CR_PAT }}
          NPM_WALLET_PKG_TAG: $(NPM_WALLET_PKG_TAG)
          NPM_WALLET_PKG_NAME: $(NPM_WALLET_PKG_NAME)
          NPM_WALLET_PKG_REPO: $(NPM_WALLET_PKG_REPO)
